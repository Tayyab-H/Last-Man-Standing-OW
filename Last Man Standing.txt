settings
{
	main
	{
		Description: "Last Man Standing!. Pick up items and blast your way to victory. 20 Unique items of 4 rarities - Common, Rare, Epic, Legendary. Kill your opponents, get loot and defeat the competition! Loot up before Permadeath begins and be the last man standing! Join the discord: https://discord.gg/vjF2v3p"
	}
	modes
	{
		Deathmatch
		{
			enabled maps
			{
				King's Row
			}
			Score To Win: 50
		}
		General
		{
			Game Mode Start: Immediately
		}
	}
	heroes
	{
		General
		{
			enabled heroes
			{
				Cassidy
				Soldier: 76
			}
		}
	}
}
variables {
    global:
        0: SpawnPos
        1: isSpawning
        2: ItemsOnFloor
        5: Drops
        8: ItemsToDrop
        9: DropsReady
        10: numberOfDrops
        11: dropsIndex
        12: LightShafts
        13: currentLightShaftPos
        14: currentItemBeingSpawned
        15: lightShaftIndex
        16: lightShaftEntity
        26: PermaDeathCounter
        27: PermaDeath
        28: DomeEndLoc
        29: DomeRad
        30: PermaDeathIcon
    player:
        0: ItemBeingLookedAt
        1: InventoryItemSelect
        3: InvIndex
        8: Inv1
        9: Inv2
        10: Inv3
        11: Inv4
        12: ID1
        13: ID2
        14: ID3
        15: ID4
        16: currentInvIndex
        17: InvItemUnselect
        19: tempArray
        20: isPickingUp
        21: invIndexCopy
        22: ItemToBeAdded
        23: isPickup2
        24: ItemBeingUsed
        25: Hero
        26: HeroHealth
        27: PlayersInAngleView
        28: PlayerToBeChanged
        29: SelectTextId
        30: WallHacks
        31: KnockDown
        32: RunningTextID
        33: InvincibillityTextID
        34: Burn
        35: BurnTextID
        36: InvisibleTextID
        37: SmokeGrenadeEntity
        38: ClearSmoke
        39: ControlsID
        41: ControlsID2
        42: ControlsID3
        43: ControlsID4
        44: ControlsID5
        45: KillStreak
        46: CurrentItemDesc
        47: CurrentItemTextID
        48: FireDomeDamage
}
subroutines {
    0: changeItemDesc
    1: getCurrentItem
}
rule ("Asssemble hero time") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Assembling Heroes == True;
    }
    actions {
        Set Match Time(10);
    }
}

rule ("Controls off") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Crouch)) == False;
    }
    actions {
        Destroy HUD Text((Event Player).ControlsID);
        Destroy HUD Text((Event Player).ControlsID2);
        Destroy HUD Text((Event Player).ControlsID3);
        Destroy HUD Text((Event Player).ControlsID4);
        Destroy HUD Text((Event Player).ControlsID5);
        Create HUD Text(Event Player, Null, Null, Custom String("Hold Crouch to see controls", Null, Null, Null), Right, 1, Null, Null, Color(Red), String, Default Visibility);
        Set Player Variable(Event Player, ControlsID, Last Text ID);
    }
}

rule ("Controls On") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Crouch)) == True;
    }
    actions {
        Destroy HUD Text((Event Player).ControlsID);
        Create HUD Text(Event Player, Null, Null, Custom String("F TO PICK UP ITEMS ON THE FLOOR.", Null, Null, Null), Right, 1, Null, Null, Color(Blue), String, Default Visibility);
        Set Player Variable(Event Player, ControlsID2, Last Text ID);
        Create HUD Text(Event Player, Null, Null, Custom String("HOLD F + PRESS SECONDARY FIRE TO CYCLE THROUGH ITEMS IN YOUR INVENTORY.", Null, Null, Null), Right, 1, Null, Null, Color(Blue), String, Default Visibility);
        Set Player Variable(Event Player, ControlsID3, Last Text ID);
        Create HUD Text(Event Player, Null, Null, Custom String("HOLD F + PRESS PRIMARY FIRE TO USE SELECTED ITEM.", Null, Null, Null), Right, 2, Null, Null, Color(Blue), String, Default Visibility);
        Set Player Variable(Event Player, ControlsID4, Last Text ID);
        Create HUD Text(Event Player, Null, Null, Custom String("F + RELOAD TO DROP SELECTED ITEM", Null, Null, Null), Right, 3, Null, Null, Color(Blue), String, Default Visibility);
        Set Player Variable(Event Player, ControlsID5, Last Text ID);
    }
}

rule ("Initialise Global Vars") {
    event {
        Ongoing - Global;
    }
    actions {
        If(Or(Compare(Current Map, ==, Map(Blizzard World)), Compare(Current Map, ==, Map(Blizzard World Winter))));
            Set Global Variable(SpawnPos, Vector(-63.255, 0.855, 92.966));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-50.109, 0.858, 78.684)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-22.823, 1.251, 57.938)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-69.008, 7.832, 109.941)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-60.186, 6.975, 83.606)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-76.896, 6.123, 66.414)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-91.46, 2.002, 94.545)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-80.471, 1.498, 63.009)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-17.627, 3.155, 89.12)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-49.644, 1.061, 88.105)));
        End;
        If(Or(Compare(Current Map, ==, Map(Eichenwalde)), Compare(Current Map, ==, Map(Eichenwalde Halloween))));
            Set Global Variable(SpawnPos, Vector(100.751, 14.149, -109.204));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(55.268, 12.149, -119.552)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(42.081, 12.031, -98.12)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(55.758, 19.15, -109.956)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(58.366, 6.149, -90.497)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(82.438, 14.107, -86.502)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(55.562, 22.429, -67.671)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(44.908, 6.973, -69.802)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(87.53, 14.071, -69.768)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(55.664, 19.471, -79.319)));
        End;
        If(Or(Compare(Current Map, ==, Map(Black Forest)), Compare(Current Map, ==, Map(Black Forest Winter))));
            Set Global Variable(SpawnPos, Vector(28.241, 18.545, 22.369));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(32.554, 13.551, 35.475)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-9.202, 14.548, 27.542)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(20.793, 10.548, 4.837)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(32.959, 13.549, -24.534)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(14.918, 12.595, -17.8)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(11.745, 18.55, 4.893)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-20.915, 13.64, 5.217)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(14.972, 18.475, 12.681)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(2.392, 13.767, -14.456)));
        End;
        If(Or(Compare(Current Map, ==, Map(King's Row)), Compare(Current Map, ==, Map(King's Row Winter))));
            Set Global Variable(SpawnPos, Vector(-45.411, 1.391, -29.448));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-54.6, 1.491, -25.469)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-74.82, 6.05, -38.854)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-71.579, 1.333, -19.453)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-70.725, 1.302, -20.21)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-57.905, 6.508, -16.597)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-62.204, 1.551, 2.584)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-71.857, 2.05, -31.7)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-100.261, 1.056, -32.351)));
            Set Global Variable(SpawnPos, Append To Array(Global.SpawnPos, Vector(-85.323, 1.938, -42.242)));
        End;
        Set Global Variable(Drops, 1);
        Set Global Variable(Drops, Append To Array(Global.Drops, 1));
        Set Global Variable(Drops, Append To Array(Global.Drops, 1));
        Set Global Variable(Drops, Append To Array(Global.Drops, 1));
        Set Global Variable(Drops, Append To Array(Global.Drops, 1));
        Set Global Variable(Drops, Append To Array(Global.Drops, 2));
        Set Global Variable(Drops, Append To Array(Global.Drops, 2));
        Set Global Variable(Drops, Append To Array(Global.Drops, 2));
        Set Global Variable(Drops, Append To Array(Global.Drops, 2));
        Set Global Variable(Drops, Append To Array(Global.Drops, 3));
        Set Global Variable(Drops, Append To Array(Global.Drops, 3));
        Set Global Variable(Drops, Append To Array(Global.Drops, 3));
        Set Global Variable(Drops, Append To Array(Global.Drops, 3));
        Set Global Variable(Drops, Append To Array(Global.Drops, 4));
        Set Global Variable(Drops, Append To Array(Global.Drops, 4));
        Set Global Variable(Drops, Append To Array(Global.Drops, 4));
        Set Global Variable(Drops, Append To Array(Global.Drops, 4));
        Set Global Variable(Drops, Append To Array(Global.Drops, 4));
        Set Global Variable(Drops, Append To Array(Global.Drops, 5));
        Set Global Variable(Drops, Append To Array(Global.Drops, 5));
        Set Global Variable(Drops, Append To Array(Global.Drops, 5));
        Set Global Variable(Drops, Append To Array(Global.Drops, 5));
        Set Global Variable(Drops, Append To Array(Global.Drops, 6));
        Set Global Variable(Drops, Append To Array(Global.Drops, 6));
        Set Global Variable(Drops, Append To Array(Global.Drops, 6));
        Set Global Variable(Drops, Append To Array(Global.Drops, 6));
        Set Global Variable(Drops, Append To Array(Global.Drops, 6));
        Set Global Variable(Drops, Append To Array(Global.Drops, 7));
        Set Global Variable(Drops, Append To Array(Global.Drops, 8));
        Set Global Variable(Drops, Append To Array(Global.Drops, 8));
        Set Global Variable(Drops, Append To Array(Global.Drops, 9));
        Set Global Variable(Drops, Append To Array(Global.Drops, 10));
        Set Global Variable(Drops, Append To Array(Global.Drops, 11));
        Set Global Variable(Drops, Append To Array(Global.Drops, 12));
        Set Global Variable(Drops, Append To Array(Global.Drops, 12));
        Set Global Variable(Drops, Append To Array(Global.Drops, 12));
        Set Global Variable(Drops, Append To Array(Global.Drops, 12));
        Set Global Variable(Drops, Append To Array(Global.Drops, 13));
        Set Global Variable(Drops, Append To Array(Global.Drops, 13));
        Set Global Variable(Drops, Append To Array(Global.Drops, 13));
        Set Global Variable(Drops, Append To Array(Global.Drops, 13));
        Set Global Variable(Drops, Append To Array(Global.Drops, 14));
        Set Global Variable(Drops, Append To Array(Global.Drops, 14));
        Set Global Variable(Drops, Append To Array(Global.Drops, 15));
        Set Global Variable(Drops, Append To Array(Global.Drops, 15));
        Set Global Variable(Drops, Append To Array(Global.Drops, 15));
        Set Global Variable(Drops, Append To Array(Global.Drops, 15));
        Set Global Variable(Drops, Append To Array(Global.Drops, 15));
        Set Global Variable(Drops, Append To Array(Global.Drops, 16));
        Set Global Variable(Drops, Append To Array(Global.Drops, 16));
        Set Global Variable(Drops, Append To Array(Global.Drops, 16));
        Set Global Variable(Drops, Append To Array(Global.Drops, 16));
        Set Global Variable(Drops, Append To Array(Global.Drops, 17));
        Set Global Variable(Drops, Append To Array(Global.Drops, 17));
        Set Global Variable(Drops, Append To Array(Global.Drops, 18));
        Set Global Variable(Drops, Append To Array(Global.Drops, 18));
        Set Global Variable(Drops, Append To Array(Global.Drops, 18));
        Set Global Variable(Drops, Append To Array(Global.Drops, 18));
        Set Global Variable(Drops, Append To Array(Global.Drops, 18));
        Set Global Variable(Drops, Append To Array(Global.Drops, 19));
        Set Global Variable(Drops, Append To Array(Global.Drops, 19));
        Set Global Variable(Drops, Append To Array(Global.Drops, 20));
        Set Global Variable(Drops, Append To Array(Global.Drops, 20));
        Set Global Variable(isSpawning, False);
        Set Global Variable(ItemsOnFloor, Empty Array);
        Set Global Variable(numberOfDrops, 10);
        Set Global Variable(LightShafts, Empty Array);
        Set Global Variable(ItemsToDrop, Empty Array);
        Set Global Variable(dropsIndex, 0);
        Set Global Variable(lightShaftEntity, Empty Array);
        Reset Player Hero Availability(All Players(All Teams));
        Disable Built-In Game Mode Announcer;
        Disable Built-In Game Mode Music;
        Set Global Variable(PermaDeathCounter, 5);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} {1}", Global.PermaDeathCounter, Custom String("Rounds until perma-death begins!", Null, Null, Null), Null), Right, 5, Null, Null, Color(Purple), Visible To and String, Default Visibility);
        Set Global Variable(PermaDeathIcon, Last Text ID);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Made by Tayyab. Join the discord! discord.gg/vjF2v3p", Null, Null, Null), Right, -1, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
    }
}

rule ("initialise inventory and player vars") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    actions {
        Create HUD Text(Event Player, Null, Null, Custom String("INVENTORY:", Null, Null, Null), Left, 0, Null, Null, Color(Red), Visible To and String, Default Visibility);
        Create HUD Text(Event Player, Custom String(">EMPTY", Null, Null, Null), Null, Null, Left, 1, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        Create HUD Text(Event Player, Custom String("EMPTY", Null, Null, Null), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        Create HUD Text(Event Player, Custom String("EMPTY", Null, Null, Null), Null, Null, Left, 3, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        Create HUD Text(Event Player, Custom String("EMPTY", Null, Null, Null), Null, Null, Left, 4, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        Set Player Variable(Event Player, InvIndex, 0);
        Set Player Variable(Event Player, currentInvIndex, 0);
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickup2, False);
        Set Ability 1 Enabled(Event Player, False);
        Set Ability 2 Enabled(Event Player, False);
        Set Ultimate Ability Enabled(Event Player, False);
        Set Player Variable(Event Player, PlayerToBeChanged, Null);
        Create Icon(Filtered Array(All Players(All Teams), Compare((Current Array Element).WallHacks, ==, True)), Event Player, Skull, Visible To and Position, Color(Red), True);
    }
}

rule ("Item Pickup") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Interact)) == True;
        Is Alive(Event Player) == True;
        Is Button Held(Event Player, Button(Primary Fire)) == False;
        Is Button Held(Event Player, Button(Ability 2)) == False;
    }
    actions {
        Set Player Variable(Event Player, tempArray, Empty Array);
        Set Player Variable(Event Player, ItemBeingLookedAt, Filtered Array(Global.ItemsOnFloor, Compare(Absolute Value(Subtract(Position Of(Event Player), Current Array Element)), <=, 5)));
        Set Player Variable(Event Player, ItemBeingLookedAt, Filtered Array((Event Player).ItemBeingLookedAt, Compare(Absolute Value(Current Array Element), !=, Current Array Element)));
        Set Player Variable(Event Player, ItemBeingLookedAt, Sorted Array((Event Player).ItemBeingLookedAt, Absolute Value(Subtract(Position Of(Event Player), Current Array Element))));
        Set Player Variable(Event Player, ItemBeingLookedAt, First Of((Event Player).ItemBeingLookedAt));
        Set Player Variable(Event Player, ItemBeingLookedAt, Index Of Array Value(Global.ItemsOnFloor, (Event Player).ItemBeingLookedAt));
        Set Player Variable(Event Player, tempArray, Append To Array((Event Player).tempArray, (Event Player).Inv1));
        Set Player Variable(Event Player, tempArray, Append To Array((Event Player).tempArray, (Event Player).Inv2));
        Set Player Variable(Event Player, tempArray, Append To Array((Event Player).tempArray, (Event Player).Inv3));
        Set Player Variable(Event Player, tempArray, Append To Array((Event Player).tempArray, (Event Player).Inv4));
        Skip If(Compare((Event Player).ItemBeingLookedAt, ==, -1), 38);
        Skip If(Compare(Index Of Array Value((Event Player).tempArray, 0), !=, -1), 2);
        Small Message(Event Player, Custom String("Inventory Full", Null, Null, Null));
        Abort;
        //lbl_1:
        Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Event Player, 10);
        Destroy Effect(Value In Array(Global.ItemsOnFloor, Add((Event Player).ItemBeingLookedAt, 1)));
        Destroy In-World Text(Value In Array(Global.ItemsOnFloor, Add((Event Player).ItemBeingLookedAt, 2)));
        Set Player Variable(Event Player, ItemToBeAdded, Value In Array(Global.ItemsOnFloor, Subtract((Event Player).ItemBeingLookedAt, 1)));
        Set Global Variable(ItemsOnFloor, Append To Array(Array Slice(Global.ItemsOnFloor, 0, Subtract((Event Player).ItemBeingLookedAt, 1)), Array Slice(Global.ItemsOnFloor, Add((Event Player).ItemBeingLookedAt, 3), 9999999)));
        Set Player Variable(Event Player, ItemBeingLookedAt, Empty Array);
        Set Player Variable(Event Player, tempArray, Index Of Array Value((Event Player).tempArray, 0));
        Set Player Variable(Event Player, invIndexCopy, (Event Player).InvIndex);
        Set Player Variable(Event Player, isPickingUp, True);
        Skip If(Compare((Event Player).tempArray, !=, 0), 9);
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Set Player Variable(Event Player, Inv1, (Event Player).ItemToBeAdded);
        Set Player Variable(Event Player, InventoryItemSelect, (Event Player).ItemToBeAdded);
        Abort;
        //lbl_3:
        Skip If(Compare((Event Player).InvIndex, ==, 0), 4);
        Set Player Variable(Event Player, Inv1, (Event Player).ItemToBeAdded);
        Set Player Variable(Event Player, InvIndex, 1);
        Set Player Variable(Event Player, InvItemUnselect, (Event Player).ItemToBeAdded);
        Abort;
        //lbl_2:
        //lbl_4:
        Skip If(Compare((Event Player).tempArray, !=, 1), 9);
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Set Player Variable(Event Player, Inv2, (Event Player).ItemToBeAdded);
        Set Player Variable(Event Player, InventoryItemSelect, (Event Player).ItemToBeAdded);
        Abort;
        //lbl_6:
        Skip If(Compare((Event Player).InvIndex, ==, 1), 4);
        Set Player Variable(Event Player, Inv2, (Event Player).ItemToBeAdded);
        Set Player Variable(Event Player, InvIndex, 2);
        Set Player Variable(Event Player, InvItemUnselect, (Event Player).ItemToBeAdded);
        Abort;
        //lbl_5:
        //lbl_7:
        Skip If(Compare((Event Player).tempArray, !=, 2), 2);
        Set Player Variable(Event Player, isPickup2, True);
        Abort;
        //lbl_8:
        Skip If(Compare((Event Player).tempArray, !=, 3), 2);
        Set Player Variable(Event Player, isPickup2, True);
        Abort;
        //lbl_0:
        //lbl_9:
    }
}

rule ("Item Pickup 2") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).isPickup2 == True;
    }
    actions {
        Skip If(Compare((Event Player).tempArray, !=, 2), 11);
        Skip If(Compare((Event Player).InvIndex, !=, 2), 4);
        Set Player Variable(Event Player, Inv3, (Event Player).ItemToBeAdded);
        Set Player Variable(Event Player, InventoryItemSelect, (Event Player).ItemToBeAdded);
        Set Player Variable(Event Player, isPickup2, False);
        Abort;
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, ==, 2), 5);
        Set Player Variable(Event Player, Inv3, (Event Player).ItemToBeAdded);
        Set Player Variable(Event Player, InvIndex, 3);
        Set Player Variable(Event Player, InvItemUnselect, (Event Player).ItemToBeAdded);
        Set Player Variable(Event Player, isPickup2, False);
        Abort;
        //lbl_0:
        //lbl_2:
        Skip If(Compare((Event Player).tempArray, !=, 3), 11);
        Skip If(Compare((Event Player).InvIndex, !=, 3), 4);
        Set Player Variable(Event Player, Inv4, (Event Player).ItemToBeAdded);
        Set Player Variable(Event Player, InventoryItemSelect, (Event Player).ItemToBeAdded);
        Set Player Variable(Event Player, isPickup2, False);
        Abort;
        //lbl_4:
        Skip If(Compare((Event Player).InvIndex, ==, 3), 5);
        Set Player Variable(Event Player, Inv4, (Event Player).ItemToBeAdded);
        Set Player Variable(Event Player, InvIndex, 0);
        Set Player Variable(Event Player, InvItemUnselect, (Event Player).ItemToBeAdded);
        Set Player Variable(Event Player, isPickup2, False);
        Abort;
        //lbl_3:
        //lbl_5:
    }
}

rule ("Using Item inv 1") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Interact)) == True;
        (Event Player).InvIndex == 0;
        (Event Player).Inv1 != 0;
        Is Alive(Event Player) == True;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
        Is Button Held(Event Player, Button(Secondary Fire)) == False;
    }
    actions {
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String(">Empty", Null, Null, Null), Null, Null, Left, 1, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        Set Player Variable(Event Player, ItemBeingUsed, (Event Player).Inv1);
        Set Player Variable(Event Player, Inv1, 0);
        Call Subroutine(changeItemDesc);
    }
}

rule ("Using Item inv 2") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Interact)) == True;
        (Event Player).InvIndex == 1;
        (Event Player).Inv2 != 0;
        Is Alive(Event Player) == True;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
        Is Button Held(Event Player, Button(Secondary Fire)) == False;
    }
    actions {
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String(">Empty", Null, Null, Null), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        Set Player Variable(Event Player, ItemBeingUsed, (Event Player).Inv2);
        Set Player Variable(Event Player, Inv2, 0);
        Call Subroutine(changeItemDesc);
    }
}

rule ("Using Item inv 3") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Interact)) == True;
        (Event Player).InvIndex == 2;
        (Event Player).Inv3 != 0;
        Is Alive(Event Player) == True;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
        Is Button Held(Event Player, Button(Secondary Fire)) == False;
    }
    actions {
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String(">Empty", Null, Null, Null), Null, Null, Left, 3, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        Set Player Variable(Event Player, ItemBeingUsed, (Event Player).Inv3);
        Set Player Variable(Event Player, Inv3, 0);
        Call Subroutine(changeItemDesc);
    }
}

rule ("Using Item inv 4") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Interact)) == True;
        (Event Player).InvIndex == 3;
        (Event Player).Inv4 != 0;
        Is Alive(Event Player) == True;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
        Is Button Held(Event Player, Button(Secondary Fire)) == False;
    }
    actions {
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String(">Empty", Null, Null, Null), Null, Null, Left, 4, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        Set Player Variable(Event Player, ItemBeingUsed, (Event Player).Inv4);
        Set Player Variable(Event Player, Inv4, 0);
        Call Subroutine(changeItemDesc);
    }
}

rule ("spawn item") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.PermaDeathCounter > 0;
    }
    actions {
        "bigMessage(getAllPlayers(), \"{0}{1}{2}\".format(\"Permadeath begins in \", PermaDeathCounter, \" Rounds\"))"
        Modify Global Variable(PermaDeathCounter, Subtract, 1);
        Set Global Variable(DropsReady, 0.5);
        Set Match Time(30);
        Wait(30, Ignore Condition);
        Loop;
    }
}

rule ("Clear all items") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.DropsReady == 0.5;
        Global.ItemsOnFloor == Empty Array;
    }
    actions {
        Set Global Variable(DropsReady, 1);
    }
}

rule ("Clear all items") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.DropsReady == 0.5;
        Global.ItemsOnFloor != Empty Array;
    }
    actions {
        Destroy Effect(Value In Array(Global.ItemsOnFloor, 2));
        Destroy In-World Text(Value In Array(Global.ItemsOnFloor, 3));
        Set Global Variable(ItemsOnFloor, Array Slice(Global.ItemsOnFloor, 4, 9999999));
        Wait(0.016, Ignore Condition);
        Loop If(Compare(Global.ItemsOnFloor, !=, Empty Array));
        Set Global Variable(DropsReady, 1);
    }
}

rule ("Inventory Selection") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Interact)) == True;
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
    }
    actions {
        Modify Player Variable(Event Player, InvIndex, Add, 1);
        Skip If(Compare((Event Player).InvIndex, <=, 3), 1);
        Set Player Variable(Event Player, InvIndex, 0);
        //lbl_0:
    }
}

rule ("1 - HP heals 75") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 1;
    }
    actions {
        Start Heal Over Time(Event Player, Event Player, 0.5, 150);
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Play Effect(All Players(All Teams), Good Explosion, Color(Green), Event Player, 10);
    }
}

rule ("1 - HP heals 75 HUD Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 1;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Plus), Custom String("Health Shot (Small)", Null, Null, Null)), Null, Null, Left, 1, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Plus), Custom String("Health Shot (Small)", Null, Null, Null)), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Plus), Custom String("Health Shot (Small)", Null, Null, Null)), Null, Null, Left, 3, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Plus), Custom String("Health Shot (Small)", Null, Null, Null)), Null, Null, Left, 4, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("1 - HP heals 75 HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 1;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Plus), Custom String("Health Shot (Small)", Null, Null, Null), Null), Null, Null, Left, 4, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Plus), Custom String("Health Shot (Small)", Null, Null, Null), Null), Null, Null, Left, 1, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Plus), Custom String("Health Shot (Small)", Null, Null, Null), Null), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Plus), Custom String("Health Shot (Small)", Null, Null, Null), Null), Null, Null, Left, 3, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("2 - HP heals 125") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 2;
    }
    actions {
        Start Heal Over Time(Event Player, Event Player, 1, 125);
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Play Effect(All Players(All Teams), Good Explosion, Color(Green), Event Player, 10);
    }
}

rule ("2 - HP heals 125 HUD Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 2;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Plus), Custom String("Health Shot (Medium)", Null, Null, Null)), Null, Null, Left, 1, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Plus), Custom String("Health Shot (Medium)", Null, Null, Null)), Null, Null, Left, 2, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Plus), Custom String("Health Shot (Medium)", Null, Null, Null)), Null, Null, Left, 3, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Plus), Custom String("Health Shot (Medium)", Null, Null, Null)), Null, Null, Left, 4, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("2 - HP heals 125 HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 2;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Plus), Custom String("Health Shot (Medium)", Null, Null, Null), Null), Null, Null, Left, 4, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Plus), Custom String("Health Shot (Medium)", Null, Null, Null), Null), Null, Null, Left, 1, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Plus), Custom String("Health Shot (Medium)", Null, Null, Null), Null), Null, Null, Left, 2, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Plus), Custom String("Health Shot (Medium)", Null, Null, Null), Null), Null, Null, Left, 3, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("3 - Unlock Ability 2") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 3;
    }
    actions {
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Set Ability 2 Enabled(Event Player, True);
        Small Message(Event Player, Custom String("Abillity 2 Unlocked", Null, Null, Null));
        Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 100);
    }
}

rule ("3 - Unlock Ability 2 Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 3;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Checkmark), Custom String("Abillity Key 2", Null, Null, Null)), Null, Null, Left, 1, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Checkmark), Custom String("Abillity Key 2", Null, Null, Null)), Null, Null, Left, 2, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Checkmark), Custom String("Abillity Key 2", Null, Null, Null)), Null, Null, Left, 3, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Checkmark), Custom String("Abillity Key 2", Null, Null, Null)), Null, Null, Left, 4, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("3 - Unlock Ability 2 HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 3;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Checkmark), Custom String("Abillity Key 2", Null, Null, Null), Null), Null, Null, Left, 4, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Checkmark), Custom String("Abillity Key 2", Null, Null, Null), Null), Null, Null, Left, 1, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Checkmark), Custom String("Abillity Key 2", Null, Null, Null), Null), Null, Null, Left, 2, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Checkmark), Custom String("Abillity Key 2", Null, Null, Null), Null), Null, Null, Left, 3, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("4 - Unlock Ability 1") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 4;
    }
    actions {
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Set Ability 1 Enabled(Event Player, True);
        Small Message(Event Player, Custom String("Abillity 1 Unlocked", Null, Null, Null));
        Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 100);
    }
}

rule ("4 - Unlock Ability 1 Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 4;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Checkmark), Custom String("Ability key 1", Null, Null, Null)), Null, Null, Left, 1, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Checkmark), Custom String("Ability key 1", Null, Null, Null)), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Checkmark), Custom String("Ability key 1", Null, Null, Null)), Null, Null, Left, 3, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Checkmark), Custom String("Ability key 1", Null, Null, Null)), Null, Null, Left, 4, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("4 - Unlock Ability 1 HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 4;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Checkmark), Custom String("Ability key 1", Null, Null, Null), Null), Null, Null, Left, 4, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Checkmark), Custom String("Ability key 1", Null, Null, Null), Null), Null, Null, Left, 1, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Checkmark), Custom String("Ability key 1", Null, Null, Null), Null), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Checkmark), Custom String("Ability key 1", Null, Null, Null), Null), Null, Null, Left, 3, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("5 - HP heals 200") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 5;
    }
    actions {
        Start Heal Over Time(Event Player, Event Player, 1, 200);
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Play Effect(All Players(All Teams), Good Explosion, Color(Green), Event Player, 10);
    }
}

rule ("5 - HP heals 200 HUD Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 5;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Plus), Custom String("Health Shot (Large)", Null, Null, Null)), Null, Null, Left, 1, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Plus), Custom String("Health Shot (Large)", Null, Null, Null)), Null, Null, Left, 2, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Plus), Custom String("Health Shot (Large)", Null, Null, Null)), Null, Null, Left, 3, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Plus), Custom String("Health Shot (Large)", Null, Null, Null)), Null, Null, Left, 4, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("5 - HP heals 200 HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 5;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Plus), Custom String("Health Shot (Large)", Null, Null, Null), Null), Null, Null, Left, 4, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Plus), Custom String("Health Shot (Large)", Null, Null, Null), Null), Null, Null, Left, 1, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Plus), Custom String("Health Shot (Large)", Null, Null, Null), Null), Null, Null, Left, 2, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Plus), Custom String("Health Shot (Large)", Null, Null, Null), Null), Null, Null, Left, 3, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("6 - Super Jump") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 6;
    }
    actions {
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Play Effect(Event Player, Good Explosion, Color(White), Event Player, 100);
        Apply Impulse(Event Player, Vector(0, 1, 0), 20, To World, Cancel Contrary Motion);
    }
}

rule ("6 - Super Jump HUD Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 6;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Arrow: Up), Custom String("Exo Boots", Null, Null, Null)), Null, Null, Left, 1, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Arrow: Up), Custom String("Exo Boots", Null, Null, Null)), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Arrow: Up), Custom String("Exo Boots", Null, Null, Null)), Null, Null, Left, 3, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Arrow: Up), Custom String("Exo Boots", Null, Null, Null)), Null, Null, Left, 4, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("6 - Super Jump HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 6;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Arrow: Up), Custom String("Exo Boots", Null, Null, Null), Null), Null, Null, Left, 4, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Arrow: Up), Custom String("Exo Boots", Null, Null, Null), Null), Null, Null, Left, 1, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Arrow: Up), Custom String("Exo Boots", Null, Null, Null), Null), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Arrow: Up), Custom String("Exo Boots", Null, Null, Null), Null), Null, Null, Left, 3, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("7 - Refresher") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 7;
    }
    actions {
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Set Player Variable(Event Player, HeroHealth, Health(Event Player));
        Set Player Variable(Event Player, Hero, Hero Of(Event Player));
        Preload Hero(Event Player, (Event Player).Hero);
        Start Forcing Player To Be Hero(Event Player, Hero(Ana));
        Start Forcing Player To Be Hero(Event Player, (Event Player).Hero);
        Stop Forcing Player To Be Hero(Event Player);
    }
}

rule ("7 -Refresher HUD Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 7;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Recycle), Custom String("Refresher", Null, Null, Null)), Null, Null, Left, 1, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Recycle), Custom String("Refresher", Null, Null, Null)), Null, Null, Left, 2, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Recycle), Custom String("Refresher", Null, Null, Null)), Null, Null, Left, 3, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Recycle), Custom String("Refresher", Null, Null, Null)), Null, Null, Left, 4, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("7 - Refresher HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 7;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Recycle), Custom String("Refresher", Null, Null, Null), Null), Null, Null, Left, 4, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Recycle), Custom String("Refresher", Null, Null, Null), Null), Null, Null, Left, 1, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Recycle), Custom String("Refresher", Null, Null, Null), Null), Null, Null, Left, 2, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Recycle), Custom String("Refresher", Null, Null, Null), Null), Null, Null, Left, 3, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("8 - Unlock ult") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 8;
    }
    actions {
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Set Ultimate Ability Enabled(Event Player, True);
        Small Message(Event Player, Custom String("Ultimate Unlocked", Null, Null, Null));
        Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 100);
    }
}

rule ("8 - Unlock ult Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 8;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Checkmark), Custom String("Ultimate key", Null, Null, Null)), Null, Null, Left, 1, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Checkmark), Custom String("Ultimate key", Null, Null, Null)), Null, Null, Left, 2, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Checkmark), Custom String("Ultimate key", Null, Null, Null)), Null, Null, Left, 3, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Checkmark), Custom String("Ultimate key", Null, Null, Null)), Null, Null, Left, 4, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("8 - Unlock ult HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 8;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Checkmark), Custom String("Ultimate key", Null, Null, Null), Null), Null, Null, Left, 4, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Checkmark), Custom String("Ultimate key", Null, Null, Null), Null), Null, Null, Left, 1, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Checkmark), Custom String("Ultimate key", Null, Null, Null), Null), Null, Null, Left, 2, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Checkmark), Custom String("Ultimate key", Null, Null, Null), Null), Null, Null, Left, 3, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("9 - Hero Changer(choice)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 9;
    }
    actions {
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Set Player Allowed Heroes(Event Player, Remove From Array(All Damage Heroes, Hero Of(Event Player)));
        Wait(0.25, Ignore Condition);
        Set Player Allowed Heroes(Event Player, All Damage Heroes);
    }
}

rule ("9 - Hero Changer(choice) Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 9;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Hero Icon String(Hero Of(Event Player)), Custom String("Hero Change-inator", Null, Null, Null)), Null, Null, Left, 1, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Hero Icon String(Hero Of(Event Player)), Custom String("Hero Change-inator", Null, Null, Null)), Null, Null, Left, 2, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Hero Icon String(Hero Of(Event Player)), Custom String("Hero Change-inator", Null, Null, Null)), Null, Null, Left, 3, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Hero Icon String(Hero Of(Event Player)), Custom String("Hero Change-inator", Null, Null, Null)), Null, Null, Left, 4, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("9 - Hero Changer(choice) HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 9;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Hero Icon String(Hero Of(Event Player)), Custom String("Hero Change-inator", Null, Null, Null), Null), Null, Null, Left, 4, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Hero Icon String(Hero Of(Event Player)), Custom String("Hero Change-inator", Null, Null, Null), Null), Null, Null, Left, 1, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Hero Icon String(Hero Of(Event Player)), Custom String("Hero Change-inator", Null, Null, Null), Null), Null, Null, Left, 2, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Hero Icon String(Hero Of(Event Player)), Custom String("Hero Change-inator", Null, Null, Null), Null), Null, Null, Left, 3, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("UnTargeting for enemy hero change 2") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Players in View Angle(Event Player, All Teams, 10) == Empty Array;
    }
    actions {
        Destroy In-World Text((Event Player).SelectTextId);
        Set Player Variable(Event Player, PlayerToBeChanged, Null);
    }
}

rule ("10 - Hero Changer(enemy)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 10;
        (Event Player).PlayerToBeChanged != Null;
    }
    actions {
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Start Forcing Player To Be Hero((Event Player).PlayerToBeChanged, Random Value In Array(All Damage Heroes));
        Stop Forcing Player To Be Hero((Event Player).PlayerToBeChanged);
    }
}

rule ("10 - Hero Changer(enemy) Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 10;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Hero Icon String(Hero Of(Event Player)), Custom String("Enemy Hero Change-inator", Null, Null, Null)), Null, Null, Left, 1, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Hero Icon String(Hero Of(Event Player)), Custom String("Enemy Hero Change-inator", Null, Null, Null)), Null, Null, Left, 2, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Hero Icon String(Hero Of(Event Player)), Custom String("Enemy Hero Change-inator", Null, Null, Null)), Null, Null, Left, 3, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Hero Icon String(Hero Of(Event Player)), Custom String("Enemy Hero Change-inator", Null, Null, Null)), Null, Null, Left, 4, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("10 - Hero Changer(enemy) HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 10;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Hero Icon String(Hero Of(Event Player)), Custom String("Enemy Hero Change-inator", Null, Null, Null), Null), Null, Null, Left, 4, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Hero Icon String(Hero Of(Event Player)), Custom String("Enemy Hero Change-inator", Null, Null, Null), Null), Null, Null, Left, 1, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Hero Icon String(Hero Of(Event Player)), Custom String("Enemy Hero Change-inator", Null, Null, Null), Null), Null, Null, Left, 2, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Hero Icon String(Hero Of(Event Player)), Custom String("Enemy Hero Change-inator", Null, Null, Null), Null), Null, Null, Left, 3, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("11 - Wall Hacks") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 11;
    }
    actions {
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Set Player Variable(Event Player, WallHacks, True);
        Small Message(Event Player, Custom String("Radar Activated!", Null, Null, Null));
        Wait(14, Ignore Condition);
        Set Player Variable(Event Player, WallHacks, False);
    }
}

rule ("11 - Wall Hacks Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 11;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Eye), Custom String("Radar", Null, Null, Null)), Null, Null, Left, 1, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Eye), Custom String("Radar", Null, Null, Null)), Null, Null, Left, 2, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Eye), Custom String("Radar", Null, Null, Null)), Null, Null, Left, 3, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Eye), Custom String("Radar", Null, Null, Null)), Null, Null, Left, 4, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("11 - Wall Hacks HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 11;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Eye), Custom String("Radar", Null, Null, Null), Null), Null, Null, Left, 4, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Eye), Custom String("Radar", Null, Null, Null), Null), Null, Null, Left, 1, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Eye), Custom String("Radar", Null, Null, Null), Null), Null, Null, Left, 2, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Eye), Custom String("Radar", Null, Null, Null), Null), Null, Null, Left, 3, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("12 - Knock Down Functionality") {
    event {
        Player Dealt Damage;
        All;
        All;
    }
    conditions {
        (Attacker).KnockDown == True;
    }
    actions {
        Set Status(Victim, Null, Knocked Down, 1);
        Set Player Variable(Attacker, KnockDown, False);
    }
}

rule ("12 - Knock Down Shell") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 12;
    }
    actions {
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Set Player Variable(Event Player, KnockDown, True);
        Small Message(Event Player, Custom String("Knock Down Shell Equipped", Null, Null, Null));
    }
}

rule ("12 - Knock Down Shell HUD Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 12;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Dizzy), Custom String("Knock Down Shell", Null, Null, Null)), Null, Null, Left, 1, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Dizzy), Custom String("Knock Down Shell", Null, Null, Null)), Null, Null, Left, 2, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Dizzy), Custom String("Knock Down Shell", Null, Null, Null)), Null, Null, Left, 3, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Dizzy), Custom String("Knock Down Shell", Null, Null, Null)), Null, Null, Left, 4, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("12 - Knock Down Shell HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 12;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Dizzy), Custom String("Knock Down Shell", Null, Null, Null), Null), Null, Null, Left, 4, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Dizzy), Custom String("Knock Down Shell", Null, Null, Null), Null), Null, Null, Left, 1, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Dizzy), Custom String("Knock Down Shell", Null, Null, Null), Null), Null, Null, Left, 2, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Dizzy), Custom String("Knock Down Shell", Null, Null, Null), Null), Null, Null, Left, 3, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("13 - Running Shoes") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 13;
    }
    actions {
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Set Move Speed(Event Player, 150);
        Create HUD Text(Event Player, Icon String(Bolt), Null, Null, Top, 0, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, RunningTextID, Last Text ID);
        Small Message(Event Player, Custom String("Running Shoes Equipped! Run!", Null, Null, Null));
        Wait(7, Ignore Condition);
        Set Move Speed(Event Player, 100);
        Destroy HUD Text((Event Player).RunningTextID);
    }
}

rule ("13 - Running Shoes HUD Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 13;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Bolt), Custom String("Running Shoes", Null, Null, Null)), Null, Null, Left, 1, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Bolt), Custom String("Running Shoes", Null, Null, Null)), Null, Null, Left, 2, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Bolt), Custom String("Running Shoes", Null, Null, Null)), Null, Null, Left, 3, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Bolt), Custom String("Running Shoes", Null, Null, Null)), Null, Null, Left, 4, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("13 - Running Shoes HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 13;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Bolt), Custom String("Running Shoes", Null, Null, Null), Null), Null, Null, Left, 4, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Bolt), Custom String("Running Shoes", Null, Null, Null), Null), Null, Null, Left, 1, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Bolt), Custom String("Running Shoes", Null, Null, Null), Null), Null, Null, Left, 2, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Bolt), Custom String("Running Shoes", Null, Null, Null), Null), Null, Null, Left, 3, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("14 - Invinci-Juice") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 14;
    }
    actions {
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Set Status(Event Player, Null, Unkillable, 5);
        Create HUD Text(Event Player, Icon String(No), Null, Null, Top, 0, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, InvincibillityTextID, Last Text ID);
        Big Message(All Players(All Teams), Custom String("{0}{1} Is invincible!", Hero Icon String(Hero Of(Event Player)), Event Player, Null));
        Wait(4.9, Ignore Condition);
        Destroy HUD Text((Event Player).InvincibillityTextID);
    }
}

rule ("14 - Invinci-Juice Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 14;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(No), Custom String("Invinci-Juice", Null, Null, Null)), Null, Null, Left, 1, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(No), Custom String("Invinci-Juice", Null, Null, Null)), Null, Null, Left, 2, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(No), Custom String("Invinci-Juice", Null, Null, Null)), Null, Null, Left, 3, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(No), Custom String("Invinci-Juice", Null, Null, Null)), Null, Null, Left, 4, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("14 - Invinci-Juice HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 14;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(No), Custom String("Invinci-Juice", Null, Null, Null), Null), Null, Null, Left, 4, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(No), Custom String("Invinci-Juice", Null, Null, Null), Null), Null, Null, Left, 1, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(No), Custom String("Invinci-Juice", Null, Null, Null), Null), Null, Null, Left, 2, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(No), Custom String("Invinci-Juice", Null, Null, Null), Null), Null, Null, Left, 3, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("15 - Teleporter") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 15;
    }
    actions {
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Play Effect(Event Player, Good Explosion, Color(White), Event Player, 100);
        Teleport(Event Player, Random Value In Array(Global.SpawnPos));
    }
}

rule ("15 - Teleporter HUD Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 15;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Spiral), Custom String("Slightly Useful Teleporter", Null, Null, Null)), Null, Null, Left, 1, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Spiral), Custom String("Slightly Useful Teleporter", Null, Null, Null)), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Spiral), Custom String("Slightly Useful Teleporter", Null, Null, Null)), Null, Null, Left, 3, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Spiral), Custom String("Slightly Useful Teleporter", Null, Null, Null)), Null, Null, Left, 4, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("15 - Teleporter HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 15;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Spiral), Custom String("Slightly Useful Teleporter", Null, Null, Null), Null), Null, Null, Left, 4, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Spiral), Custom String("Slightly Useful Teleporter", Null, Null, Null), Null), Null, Null, Left, 1, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Spiral), Custom String("Slightly Useful Teleporter", Null, Null, Null), Null), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Spiral), Custom String("Slightly Useful Teleporter", Null, Null, Null), Null), Null, Null, Left, 3, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("16 - Fire-Tipped Ammo") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 16;
    }
    actions {
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Create HUD Text(Event Player, Icon String(Fire), Null, Null, Top, 0, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, BurnTextID, Last Text ID);
        Set Player Variable(Event Player, Burn, True);
        Small Message(Event Player, Custom String("Fire-Tipped Ammo Equiped!", Null, Null, Null));
        Wait(7, Ignore Condition);
        Destroy HUD Text((Event Player).BurnTextID);
        Set Player Variable(Event Player, Burn, False);
    }
}

rule ("16 - Fire-Tipped Ammo HUD Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 16;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Fire), Custom String("Fire-Tipped Ammo", Null, Null, Null)), Null, Null, Left, 1, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Fire), Custom String("Fire-Tipped Ammo", Null, Null, Null)), Null, Null, Left, 2, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Fire), Custom String("Fire-Tipped Ammo", Null, Null, Null)), Null, Null, Left, 3, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Fire), Custom String("Fire-Tipped Ammo", Null, Null, Null)), Null, Null, Left, 4, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("16 - Fire-Tipped Ammo HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 16;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Fire), Custom String("Fire-Tipped Ammo", Null, Null, Null), Null), Null, Null, Left, 4, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Fire), Custom String("Fire-Tipped Ammo", Null, Null, Null), Null), Null, Null, Left, 1, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Fire), Custom String("Fire-Tipped Ammo", Null, Null, Null), Null), Null, Null, Left, 2, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Fire), Custom String("Fire-Tipped Ammo", Null, Null, Null), Null), Null, Null, Left, 3, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("Burn Damage for Fire-Tipped Ammo") {
    event {
        Player Dealt Damage;
        All;
        All;
    }
    conditions {
        (Attacker).Burn == True;
        Has Status(Victim, Burning) == False;
    }
    actions {
        Set Status(Victim, Null, Burning, 5);
        Start Damage Over Time(Victim, Attacker, 5, 10);
    }
}

rule ("17 - Hero Changer(random)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 17;
    }
    actions {
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Start Forcing Player To Be Hero(Event Player, Random Value In Array(Remove From Array(All Damage Heroes, Hero Of(Event Player))));
        Stop Forcing Player To Be Hero(Event Player);
    }
}

rule ("17 - Hero Changer(random) Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 17;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Hero Icon String(Hero Of(Event Player)), Custom String("Broken Hero Change-inator", Null, Null, Null)), Null, Null, Left, 1, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Hero Icon String(Hero Of(Event Player)), Custom String("Broken Hero Change-inator", Null, Null, Null)), Null, Null, Left, 2, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Hero Icon String(Hero Of(Event Player)), Custom String("Broken Hero Change-inator", Null, Null, Null)), Null, Null, Left, 3, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Hero Icon String(Hero Of(Event Player)), Custom String("Broken Hero Change-inator", Null, Null, Null)), Null, Null, Left, 4, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("17 - Hero Changer(random) HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 17;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Hero Icon String(Hero Of(Event Player)), Custom String("Broken Hero Change-inator", Null, Null, Null), Null), Null, Null, Left, 4, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Hero Icon String(Hero Of(Event Player)), Custom String("Broken Hero Change-inator", Null, Null, Null), Null), Null, Null, Left, 1, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Hero Icon String(Hero Of(Event Player)), Custom String("Broken Hero Change-inator", Null, Null, Null), Null), Null, Null, Left, 2, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Hero Icon String(Hero Of(Event Player)), Custom String("Broken Hero Change-inator", Null, Null, Null), Null), Null, Null, Left, 3, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("18 - Smoke Grenade") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 18;
    }
    actions {
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Create Effect(All Players(All Teams), Cloud, Color(Blue), Add(Position Of(Event Player), Vector(0, 0, 0)), 5, None);
        Set Player Variable(Event Player, SmokeGrenadeEntity, Append To Array((Event Player).SmokeGrenadeEntity, Last Created Entity));
        Create Effect(All Players(All Teams), Cloud, Color(Blue), Add(Position Of(Event Player), Vector(0, 0, 0)), 5, None);
        Set Player Variable(Event Player, SmokeGrenadeEntity, Append To Array((Event Player).SmokeGrenadeEntity, Last Created Entity));
        Create Effect(All Players(All Teams), Cloud, Color(Blue), Add(Position Of(Event Player), Vector(0, 0, 0)), 5, None);
        Set Player Variable(Event Player, SmokeGrenadeEntity, Append To Array((Event Player).SmokeGrenadeEntity, Last Created Entity));
        Create Effect(All Players(All Teams), Cloud, Color(Blue), Add(Position Of(Event Player), Vector(0, 0, 0)), 5, None);
        Set Player Variable(Event Player, SmokeGrenadeEntity, Append To Array((Event Player).SmokeGrenadeEntity, Last Created Entity));
        Create Effect(All Players(All Teams), Cloud, Color(Blue), Add(Position Of(Event Player), Vector(0, 0, 0)), 5, None);
        Set Player Variable(Event Player, SmokeGrenadeEntity, Append To Array((Event Player).SmokeGrenadeEntity, Last Created Entity));
        Create Effect(All Players(All Teams), Cloud, Color(Blue), Add(Position Of(Event Player), Vector(0, 1, 0)), 5, None);
        Set Player Variable(Event Player, SmokeGrenadeEntity, Append To Array((Event Player).SmokeGrenadeEntity, Last Created Entity));
        Create Effect(All Players(All Teams), Cloud, Color(Blue), Add(Position Of(Event Player), Vector(0, 1, 0)), 5, None);
        Set Player Variable(Event Player, SmokeGrenadeEntity, Append To Array((Event Player).SmokeGrenadeEntity, Last Created Entity));
        Create Effect(All Players(All Teams), Cloud, Color(Blue), Add(Position Of(Event Player), Vector(0, 1, 0)), 5, None);
        Set Player Variable(Event Player, SmokeGrenadeEntity, Append To Array((Event Player).SmokeGrenadeEntity, Last Created Entity));
        Create Effect(All Players(All Teams), Cloud, Color(Blue), Add(Position Of(Event Player), Vector(0, 1, 0)), 5, None);
        Set Player Variable(Event Player, SmokeGrenadeEntity, Append To Array((Event Player).SmokeGrenadeEntity, Last Created Entity));
        Create Effect(All Players(All Teams), Cloud, Color(Blue), Add(Position Of(Event Player), Vector(0, 1, 0)), 5, None);
        Set Player Variable(Event Player, SmokeGrenadeEntity, Append To Array((Event Player).SmokeGrenadeEntity, Last Created Entity));
        Wait(10, Ignore Condition);
        Set Player Variable(Event Player, ClearSmoke, True);
    }
}

rule ("18 - Smoke Grenade Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 18;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Warning), Custom String("Smoke Grenade", Null, Null, Null)), Null, Null, Left, 1, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Warning), Custom String("Smoke Grenade", Null, Null, Null)), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Warning), Custom String("Smoke Grenade", Null, Null, Null)), Null, Null, Left, 3, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Warning), Custom String("Smoke Grenade", Null, Null, Null)), Null, Null, Left, 4, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("18 - Smoke Grenade HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 18;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Warning), Custom String("Smoke Grenade", Null, Null, Null), Null), Null, Null, Left, 4, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Warning), Custom String("Smoke Grenade", Null, Null, Null), Null), Null, Null, Left, 1, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Warning), Custom String("Smoke Grenade", Null, Null, Null), Null), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Warning), Custom String("Smoke Grenade", Null, Null, Null), Null), Null, Null, Left, 3, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("Clear Smoke Grenades Effects") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ClearSmoke == True;
    }
    actions {
        Destroy Effect(First Of((Event Player).SmokeGrenadeEntity));
        Set Player Variable(Event Player, SmokeGrenadeEntity, Array Slice((Event Player).SmokeGrenadeEntity, 1, 9999));
        Wait(0.016, Ignore Condition);
        Loop If(Compare((Event Player).SmokeGrenadeEntity, !=, Empty Array));
        Set Player Variable(Event Player, ClearSmoke, False);
    }
}

rule ("19 - Invisible") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 19;
    }
    actions {
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Set Invisible(Event Player, All);
        Create HUD Text(Event Player, Icon String(Question Mark), Null, Null, Top, 0, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, InvisibleTextID, Last Text ID);
        Big Message(All Players(All Teams), Custom String("{0}{1} Is invisble!", Hero Icon String(Hero Of(Event Player)), Event Player, Null));
        Wait(7, Ignore Condition);
        Set Invisible(Event Player, None);
        Destroy HUD Text((Event Player).InvisibleTextID);
    }
}

rule ("19 - Invisible Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 19;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Question Mark), Custom String("Invisibox", Null, Null, Null)), Null, Null, Left, 1, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Question Mark), Custom String("Invisibox", Null, Null, Null)), Null, Null, Left, 2, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Question Mark), Custom String("Invisibox", Null, Null, Null)), Null, Null, Left, 3, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Question Mark), Custom String("Invisibox", Null, Null, Null)), Null, Null, Left, 4, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("19 - Invisible HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 19;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Question Mark), Custom String("Invisibox", Null, Null, Null), Null), Null, Null, Left, 4, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Question Mark), Custom String("Invisibox", Null, Null, Null), Null), Null, Null, Left, 1, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Question Mark), Custom String("Invisibox", Null, Null, Null), Null), Null, Null, Left, 2, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Question Mark), Custom String("Invisibox", Null, Null, Null), Null), Null, Null, Left, 3, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("20 - Insta-ult") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).ItemBeingUsed == 20;
    }
    actions {
        Set Player Variable(Event Player, ItemBeingUsed, 0);
        Set Ultimate Ability Enabled(Event Player, True);
        Set Ultimate Charge(Event Player, 100);
        Play Effect(Event Player, Good Pickup Effect, Color(White), Event Player, 10);
    }
}

rule ("20 - Insta-ult Creation Select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 20;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Checkmark), Custom String("Insta-ult", Null, Null, Null)), Null, Null, Left, 1, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Checkmark), Custom String("Insta-ult", Null, Null, Null)), Null, Null, Left, 2, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Checkmark), Custom String("Insta-ult", Null, Null, Null)), Null, Null, Left, 3, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String(">", Null, Null, Null), Icon String(Checkmark), Custom String("Insta-ult", Null, Null, Null)), Null, Null, Left, 4, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
        Call Subroutine(changeItemDesc);
    }
}

rule ("20 - Insta-ult HUD unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 20;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Checkmark), Custom String("Insta-ult", Null, Null, Null), Null), Null, Null, Left, 4, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Checkmark), Custom String("Insta-ult", Null, Null, Null), Null), Null, Null, Left, 1, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Checkmark), Custom String("Insta-ult", Null, Null, Null), Null), Null, Null, Left, 2, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("{0} {1}", Icon String(Checkmark), Custom String("Insta-ult", Null, Null, Null), Null), Null, Null, Left, 3, Color(Purple), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Skip If(Compare((Event Player).isPickingUp, !=, True), 1);
        Set Player Variable(Event Player, InvIndex, (Event Player).invIndexCopy);
        //lbl_4:
        Set Player Variable(Event Player, InvItemUnselect, -1);
        Set Player Variable(Event Player, isPickingUp, False);
    }
}

rule ("Empty item select") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InventoryItemSelect == 0;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String(">Empty", Null, Null, Null), Null, Null, Left, 1, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String(">Empty", Null, Null, Null), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String(">Empty", Null, Null, Null), Null, Null, Left, 3, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String(">Empty", Null, Null, Null), Null, Null, Left, 4, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InventoryItemSelect, -1);
    }
}

rule ("Empty item unselect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvItemUnselect == 0;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 3);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("EMPTY", Null, Null, Null), Null, Null, Left, 4, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 3);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String("EMPTY", Null, Null, Null), Null, Null, Left, 1, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 3);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("EMPTY", Null, Null, Null), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 3);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("EMPTY", Null, Null, Null), Null, Null, Left, 3, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        //lbl_3:
        Set Player Variable(Event Player, InvItemUnselect, -1);
    }
}

rule ("Inventory Controller") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).InvIndex != (Event Player).currentInvIndex;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 4);
        Set Player Variable(Event Player, InventoryItemSelect, (Event Player).Inv1);
        Set Player Variable(Event Player, InvItemUnselect, (Event Player).Inv4);
        Set Player Variable(Event Player, currentInvIndex, (Event Player).InvIndex);
        Call Subroutine(changeItemDesc);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 4);
        Set Player Variable(Event Player, InventoryItemSelect, (Event Player).Inv2);
        Set Player Variable(Event Player, InvItemUnselect, (Event Player).Inv1);
        Set Player Variable(Event Player, currentInvIndex, (Event Player).InvIndex);
        Call Subroutine(changeItemDesc);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 4);
        Set Player Variable(Event Player, InventoryItemSelect, (Event Player).Inv3);
        Set Player Variable(Event Player, InvItemUnselect, (Event Player).Inv2);
        Set Player Variable(Event Player, currentInvIndex, (Event Player).InvIndex);
        Call Subroutine(changeItemDesc);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 4);
        Set Player Variable(Event Player, InventoryItemSelect, (Event Player).Inv4);
        Set Player Variable(Event Player, InvItemUnselect, (Event Player).Inv3);
        Set Player Variable(Event Player, currentInvIndex, (Event Player).InvIndex);
        Call Subroutine(changeItemDesc);
        //lbl_3:
    }
}

rule ("Drop Item") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Interact)) == True;
        Is Button Held(Event Player, Button(Reload)) == True;
    }
    actions {
        Skip If(Compare((Event Player).InvIndex, !=, 0), 6);
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, (Event Player).Inv1));
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, Nearest Walkable Position(Position Of(Event Player))));
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String(">Empty", Null, Null, Null), Null, Null, Left, 1, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        Set Player Variable(Event Player, Inv1, 0);
        //lbl_0:
        Skip If(Compare((Event Player).InvIndex, !=, 1), 6);
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, (Event Player).Inv2));
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, Nearest Walkable Position(Position Of(Event Player))));
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String(">Empty", Null, Null, Null), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        Set Player Variable(Event Player, Inv2, 0);
        //lbl_1:
        Skip If(Compare((Event Player).InvIndex, !=, 2), 6);
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, (Event Player).Inv3));
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, Nearest Walkable Position(Position Of(Event Player))));
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String(">Empty", Null, Null, Null), Null, Null, Left, 3, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        Set Player Variable(Event Player, Inv3, 0);
        //lbl_2:
        Skip If(Compare((Event Player).InvIndex, !=, 3), 6);
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, (Event Player).Inv4));
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, Nearest Walkable Position(Position Of(Event Player))));
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String(">Empty", Null, Null, Null), Null, Null, Left, 4, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        Set Player Variable(Event Player, Inv4, 0);
        //lbl_3:
    }
}

rule ("Targeting for enemy hero change inv 1") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Players in View Angle(Event Player, All Teams, 10) != Empty Array;
        (Event Player).InvIndex == 0;
        (Event Player).Inv1 == 10;
    }
    actions {
        Set Player Variable(Event Player, PlayersInAngleView, Players in View Angle(Event Player, All Teams, 10));
        Set Player Variable(Event Player, PlayersInAngleView, Sorted Array((Event Player).PlayersInAngleView, Distance Between(Position Of(Current Array Element), Position Of(Event Player))));
        Set Player Variable(Event Player, PlayerToBeChanged, First Of((Event Player).PlayersInAngleView));
        Create In-World Text(Event Player, Icon String(Arrow: Down), Add(Position Of((Event Player).PlayerToBeChanged), Vector(0, 1.5, 0)), 1, Clip Against Surfaces, Visible To Position and String, Color(Red), Default Visibility);
        Set Player Variable(Event Player, SelectTextId, Last Text ID);
    }
}

rule ("Targeting for enemy hero change inv 2") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Players in View Angle(Event Player, All Teams, 10) != Empty Array;
        (Event Player).InvIndex == 1;
        (Event Player).Inv2 == 10;
    }
    actions {
        Set Player Variable(Event Player, PlayersInAngleView, Players in View Angle(Event Player, All Teams, 10));
        Set Player Variable(Event Player, PlayersInAngleView, Sorted Array((Event Player).PlayersInAngleView, Distance Between(Position Of(Current Array Element), Position Of(Event Player))));
        Set Player Variable(Event Player, PlayerToBeChanged, First Of((Event Player).PlayersInAngleView));
        Create In-World Text(Event Player, Icon String(Arrow: Down), Add(Position Of((Event Player).PlayerToBeChanged), Vector(0, 1.5, 0)), 1, Clip Against Surfaces, Visible To Position and String, Color(Red), Default Visibility);
        Set Player Variable(Event Player, SelectTextId, Last Text ID);
    }
}

rule ("Targeting for enemy hero change inv 3") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Players in View Angle(Event Player, All Teams, 10) != Empty Array;
        (Event Player).InvIndex == 2;
        (Event Player).Inv3 == 10;
    }
    actions {
        Set Player Variable(Event Player, PlayersInAngleView, Players in View Angle(Event Player, All Teams, 10));
        Set Player Variable(Event Player, PlayersInAngleView, Sorted Array((Event Player).PlayersInAngleView, Distance Between(Position Of(Current Array Element), Position Of(Event Player))));
        Set Player Variable(Event Player, PlayerToBeChanged, First Of((Event Player).PlayersInAngleView));
        Create In-World Text(Event Player, Icon String(Arrow: Down), Add(Position Of((Event Player).PlayerToBeChanged), Vector(0, 1.5, 0)), 1, Clip Against Surfaces, Visible To Position and String, Color(Red), Default Visibility);
        Set Player Variable(Event Player, SelectTextId, Last Text ID);
    }
}

rule ("Targeting for enemy hero change inv 4") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Players in View Angle(Event Player, All Teams, 10) != Empty Array;
        (Event Player).InvIndex == 3;
        (Event Player).Inv4 == 10;
    }
    actions {
        Set Player Variable(Event Player, PlayersInAngleView, Players in View Angle(Event Player, All Teams, 10));
        Set Player Variable(Event Player, PlayersInAngleView, Sorted Array((Event Player).PlayersInAngleView, Distance Between(Position Of(Current Array Element), Position Of(Event Player))));
        Set Player Variable(Event Player, PlayerToBeChanged, First Of((Event Player).PlayersInAngleView));
        Create In-World Text(Event Player, Icon String(Arrow: Down), Add(Position Of((Event Player).PlayerToBeChanged), Vector(0, 1.5, 0)), 1, Clip Against Surfaces, Visible To Position and String, Color(Red), Default Visibility);
        Set Player Variable(Event Player, SelectTextId, Last Text ID);
    }
}

rule ("Generate Drops") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.DropsReady == 1;
    }
    actions {
        Set Global Variable(currentLightShaftPos, Random Value In Array(Global.SpawnPos));
        Set Global Variable(LightShafts, Append To Array(Global.LightShafts, Global.currentLightShaftPos));
        Skip If(Compare(Count Of(Filtered Array(Global.LightShafts, Compare(Current Array Element, ==, Global.currentLightShaftPos))), ==, 1), 1);
        Set Global Variable(LightShafts, Remove From Array(Global.LightShafts, Global.currentLightShaftPos));
        //lbl_0:
        Modify Global Variable(dropsIndex, Add, 1);
        Wait(0.016, Ignore Condition);
        Loop If(Compare(Global.dropsIndex, <, Global.numberOfDrops));
        Set Global Variable(DropsReady, 1.5);
        Set Global Variable(dropsIndex, 0);
    }
}

rule ("Light Shaft Creation") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.DropsReady == 1.5;
    }
    actions {
        Create Effect(All Players(All Teams), Light Shaft, Color(White), Value In Array(Global.LightShafts, Global.lightShaftIndex), 2, Visible To);
        Set Global Variable(lightShaftEntity, Append To Array(Global.lightShaftEntity, Last Created Entity));
        Modify Global Variable(lightShaftIndex, Add, 1);
        Wait(0.016, Ignore Condition);
        Loop If(Compare(Global.lightShaftIndex, <, Count Of(Global.LightShafts)));
        Big Message(All Players(All Teams), Custom String("Drops Incoming", Null, Null, Null));
        If(Compare(Global.PermaDeathCounter, >, 0));
            Big Message(All Players(All Teams), Custom String("{0}{1}{2}", Custom String("Permadeath begins in ", Null, Null, Null), Global.PermaDeathCounter, Custom String(" Round(s)", Null, Null, Null)));
        Else If(Compare(Global.PermaDeathCounter, ==, 0));
            Big Message(All Players(All Teams), Custom String("{0}", Custom String("Perma-death Begins", Null, Null, Null), Null, Null));
            Set Global Variable(PermaDeathCounter, -1);
            Disable Built-In Game Mode Respawning(All Players(All Teams));
            Set Global Variable(PermaDeath, True);
            Enable Death Spectate All Players(All Players(All Teams));
            Enable Death Spectate Target HUD(All Players(All Teams));
            Respawn(All Players(All Teams));
        End;
        Wait(5, Ignore Condition);
        Set Global Variable(lightShaftIndex, 0);
        Set Global Variable(DropsReady, 1.9);
    }
}

rule ("Light Shaft Destruction") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.DropsReady == 1.9;
    }
    actions {
        Destroy Effect(Value In Array(Global.lightShaftEntity, Global.lightShaftIndex));
        Modify Global Variable(lightShaftIndex, Add, 1);
        Wait(0.016, Ignore Condition);
        Loop If(Compare(Global.lightShaftIndex, <, Count Of(Global.LightShafts)));
        Set Global Variable(lightShaftEntity, Empty Array);
        Set Global Variable(lightShaftIndex, 0);
        Set Global Variable(DropsReady, 2);
    }
}

rule ("Generate Drops 2 - Item Generation") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.DropsReady == 2;
    }
    actions {
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, Random Value In Array(Global.Drops)));
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, Add(First Of(Global.LightShafts), Vector(2, -1, 0))));
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, Random Value In Array(Global.Drops)));
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, Add(First Of(Global.LightShafts), Vector(0, -1, 2))));
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, Random Value In Array(Global.Drops)));
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, Add(First Of(Global.LightShafts), Vector(2, -1, 2))));
        Set Global Variable(LightShafts, Array Slice(Global.LightShafts, 1, 9999));
        Wait(0.016, Ignore Condition);
        Loop If(Compare(Global.LightShafts, !=, Empty Array));
        Set Global Variable(DropsReady, 3);
    }
}

rule ("Create Items In Game 1") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 1) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 1);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(White), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Health Shot (Small)", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.2, Clip Against Surfaces, Visible To and String, Color(White), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 1);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 2") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 2) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 2);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(Blue), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Health Shot (Medium)", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.2, Clip Against Surfaces, Visible To and String, Color(Blue), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 2);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 3") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 3) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 3);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(Blue), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Ability Key 2", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.2, Clip Against Surfaces, Visible To and String, Color(Blue), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 3);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 4") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 4) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 4);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(White), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Ability Key 1", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.2, Clip Against Surfaces, Visible To and String, Color(White), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 4);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 5") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 5) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 5);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(Blue), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Health Shot (Large)", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.2, Clip Against Surfaces, Visible To and String, Color(Blue), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 5);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 6") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 6) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 6);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(White), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Exo Boots", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.2, Clip Against Surfaces, Visible To and String, Color(White), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 6);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 7") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 7) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 7);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(Yellow), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Refresh", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.4, Clip Against Surfaces, Visible To and String, Color(Yellow), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 7);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 8") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 8) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 8);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(Purple), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Ultimate key", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.2, Clip Against Surfaces, Visible To and String, Color(Purple), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 8);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 9") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 9) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 9);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(Yellow), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Hero Change-inator", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.4, Clip Against Surfaces, Visible To and String, Color(Yellow), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 9);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 10") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 10) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 10);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(Yellow), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Enemy Hero Change-inator", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.4, Clip Against Surfaces, Visible To and String, Color(Yellow), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 10);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 11") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 11) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 11);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(Yellow), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Radar", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.4, Clip Against Surfaces, Visible To and String, Color(Yellow), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 11);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 12") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 12) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 12);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(Blue), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Knock Down Shell", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.2, Clip Against Surfaces, Visible To and String, Color(Blue), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 12);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 13") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 13) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 13);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(Blue), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Running Shoes", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.2, Clip Against Surfaces, Visible To and String, Color(Blue), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 13);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 14") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 14) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 14);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(Purple), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Invinci-Juice", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.2, Clip Against Surfaces, Visible To and String, Color(Purple), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 14);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 15") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 15) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 15);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(White), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Slightly Useful Teleporter", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.2, Clip Against Surfaces, Visible To and String, Color(White), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 15);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 16") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 16) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 16);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(Blue), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Fire-Tipped Ammo", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.2, Clip Against Surfaces, Visible To and String, Color(Blue), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 16);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 17") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 17) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 17);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(Purple), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Broken Hero Change-inator", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.2, Clip Against Surfaces, Visible To and String, Color(Purple), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 17);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 18") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 18) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 18);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(White), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Smoke Grenade", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.2, Clip Against Surfaces, Visible To and String, Color(White), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 18);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 19") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 19) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 19);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(Purple), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Invisibox", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.2, Clip Against Surfaces, Visible To and String, Color(Purple), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 19);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Create Items In Game 20") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.ItemsToDrop, 20) == True;
        Global.DropsReady == 3;
    }
    actions {
        Set Global Variable(currentItemBeingSpawned, 20);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Global.currentItemBeingSpawned));
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1))));
        Create Effect(All Players(All Teams), Orb, Color(Purple), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 0.05, Visible To);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Created Entity));
        Create In-World Text(All Players(All Teams), Custom String("Insta-ult", Null, Null, Null), Value In Array(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 1)), 1.2, Clip Against Surfaces, Visible To and String, Color(Purple), Default Visibility);
        Set Global Variable(ItemsOnFloor, Append To Array(Global.ItemsOnFloor, Last Text ID));
        Set Global Variable(ItemsToDrop, Append To Array(Array Slice(Global.ItemsToDrop, 0, Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned)), Array Slice(Global.ItemsToDrop, Add(Index Of Array Value(Global.ItemsToDrop, Global.currentItemBeingSpawned), 2), 10000)));
        Wait(0.016, Ignore Condition);
        Set Global Variable(currentItemBeingSpawned, 10);
        Loop If(Array Contains(Global.ItemsToDrop, Global.currentItemBeingSpawned));
    }
}

rule ("Drop items on death") {
    event {
        Player Died;
        All;
        All;
    }
    actions {
        Skip If(Compare((Event Player).Inv1, ==, 0), 2);
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, (Event Player).Inv1));
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, Add(Nearest Walkable Position(Position Of(Event Player)), Vector(0, 0, 0))));
        //lbl_0:
        Skip If(Compare((Event Player).Inv2, ==, 0), 2);
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, (Event Player).Inv2));
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, Add(Nearest Walkable Position(Position Of(Event Player)), Vector(2, 0, 0))));
        //lbl_1:
        Skip If(Compare((Event Player).Inv3, ==, 0), 2);
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, (Event Player).Inv3));
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, Add(Nearest Walkable Position(Position Of(Event Player)), Vector(0, 0, 2))));
        //lbl_2:
        Skip If(Compare((Event Player).Inv4, ==, 0), 2);
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, (Event Player).Inv4));
        Set Global Variable(ItemsToDrop, Append To Array(Global.ItemsToDrop, Add(Nearest Walkable Position(Position Of(Event Player)), Vector(2, 0, 2))));
        //lbl_3:
        Set Player Variable(Event Player, KillStreak, 0);
        Destroy HUD Text((Event Player).ID1);
        Create HUD Text(Event Player, Custom String(">Empty", Null, Null, Null), Null, Null, Left, 1, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID1, Last Text ID);
        Set Player Variable(Event Player, Inv1, 0);
        Set Player Variable(Event Player, InvIndex, 0);
        Set Player Variable(Event Player, currentInvIndex, 0);
        Destroy HUD Text((Event Player).ID2);
        Create HUD Text(Event Player, Custom String("Empty", Null, Null, Null), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID2, Last Text ID);
        Set Player Variable(Event Player, Inv2, 0);
        Destroy HUD Text((Event Player).ID3);
        Create HUD Text(Event Player, Custom String("Empty", Null, Null, Null), Null, Null, Left, 3, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID3, Last Text ID);
        Set Player Variable(Event Player, Inv3, 0);
        Destroy HUD Text((Event Player).ID4);
        Create HUD Text(Event Player, Custom String("Empty", Null, Null, Null), Null, Null, Left, 4, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, ID4, Last Text ID);
        Set Player Variable(Event Player, Inv4, 0);
    }
}

rule ("Kill Streak on elim") {
    event {
        Player Earned Elimination;
        All;
        All;
    }
    actions {
        Modify Player Variable(Event Player, KillStreak, Add, 1);
    }
}

rule ("5 kill streak") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).KillStreak == 5;
    }
    actions {
        Big Message(All Players(All Teams), Custom String("{0}{1} is on a 5 Kill Streak!", Hero Icon String(Hero Of(Event Player)), Event Player, Null));
    }
}

rule ("10 kill streak") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).KillStreak == 10;
    }
    actions {
        Big Message(All Players(All Teams), Custom String("{0}{1} is on a 10 Kill Streak!", Hero Icon String(Hero Of(Event Player)), Event Player, Null));
    }
}

rule ("Disable controls while Interact is held") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Interact)) == True;
    }
    actions {
        Set Secondary Fire Enabled(Event Player, False);
        Set Primary Fire Enabled(Event Player, False);
    }
}

rule ("Enable controls while Interact is not held") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Interact)) == False;
    }
    actions {
        Wait(0.3, Ignore Condition);
        Set Secondary Fire Enabled(Event Player, True);
        Set Primary Fire Enabled(Event Player, True);
    }
}

rule ("SubRoutine - Get Current Item") {
    event {
        Subroutine;
        getCurrentItem;
    }
    actions {
        If(Compare((Event Player).InvIndex, ==, 0));
            Set Player Variable(Event Player, CurrentItemDesc, (Event Player).Inv1);
        Else If(Compare((Event Player).InvIndex, ==, 1));
            Set Player Variable(Event Player, CurrentItemDesc, (Event Player).Inv2);
        Else If(Compare((Event Player).InvIndex, ==, 2));
            Set Player Variable(Event Player, CurrentItemDesc, (Event Player).Inv3);
        Else If(Compare((Event Player).InvIndex, ==, 3));
            Set Player Variable(Event Player, CurrentItemDesc, (Event Player).Inv4);
        End;
    }
}

rule ("SubRoutine - Create Item Desc") {
    event {
        Subroutine;
        changeItemDesc;
    }
    actions {
        Call Subroutine(getCurrentItem);
        If(Compare((Event Player).CurrentItemDesc, ==, 0));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("Its Empty! Go pick up an item, theyre really useful.", Null, Null, Null), Left, 5, Null, Null, Color(White), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 1));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("Health is a valuable resource. Without it, well, you die. \r\nThis will give you a small health boost to keep you going.", Null, Null, Null), Left, 5, Null, Null, Color(White), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 2));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("Sometimes you just need the good stuff. I'm not sure what your good stuff is, \r\nbut mine is sweet sweet health.", Null, Null, Null), Left, 5, Null, Null, Color(Blue), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 3));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("Use your abillity. Oh wait you haven't unlocked them. \r\nHere, use this to unlock your second ability.", Null, Null, Null), Left, 5, Null, Null, Color(Blue), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 4));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("Abilities are your friend. If you die or swap heroes they stay with you! \r\nUnlike my friends, who are the ones that kill me :/", Null, Null, Null), Left, 5, Null, Null, Color(White), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 5));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("This portable mega health pack is every genji mains dreams. \r\nIt'll boost you from 1 to full health so you can keep feeding!", Null, Null, Null), Left, 5, Null, Null, Color(Blue), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 6));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("Someone snuck into baptise's locker and stole his boots. \r\nUnfortunately they malfunctioned. You get 1 jump, use it well.", Null, Null, Null), Left, 5, Null, Null, Color(White), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 7));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("Sometimes you just need a refresher. I do like it when I reset my health, \r\nammo and cooldowns. Maybe you will too.", Null, Null, Null), Left, 5, Null, Null, Color(Yellow), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 8));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("This key will grant you accesss to the most powerful abillites ever seen, \r\nthat last for a few seconds and work half the time.", Null, Null, Null), Left, 5, Null, Null, Color(Purple), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 9));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("Be whoever you want to be is my philosophy in life. \r\nBoth figuratively and literally.", Null, Null, Null), Left, 5, Null, Null, Color(Yellow), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 10));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("Sometimes its fun to mess with people. Sometimes its fun to change enemys \r\ninto random heroes they dont want to be. ", Null, Null, Null), Left, 5, Null, Null, Color(Yellow), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 11));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("Ever wanted to know they exact location of enemies \r\nthrough solid objects and walls? That'd be so cool right...", Null, Null, Null), Left, 5, Null, Null, Color(Yellow), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 12));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("These shells are definitely gonna sweep your enemies off their feet, \r\nand not in the romantic way either.", Null, Null, Null), Left, 5, Null, Null, Color(Blue), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 13));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("A wise blue rodent once said \"Gotta Go Fast\".I couldn't agree more.  ", Null, Null, Null), Left, 5, Null, Null, Color(Blue), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 14));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("Whats the juice? I have no idea but this juice will make you incincible, \r\nso I choose this juice.", Null, Null, Null), Left, 5, Null, Null, Color(Purple), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 15));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("A mad scientist was making a teleporter. He made one but its broken and is random. \r\nAh well, I guess its still somewhat useful.", Null, Null, Null), Left, 5, Null, Null, Color(White), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 16));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("I left these on my table and my ex found them. She burned the house down. \r\nI guess thats what i get for playing with fire.", Null, Null, Null), Left, 5, Null, Null, Color(Blue), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 17));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("Would you rather stay how you are now or change into a random person and/or omnic. \r\nI guess we'll find out.", Null, Null, Null), Left, 5, Null, Null, Color(Purple), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 18));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("Smoking is very bad for you. However using smoke to mask positions of people \r\nand items is very good for you.", Null, Null, Null), Left, 5, Null, Null, Color(White), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 19));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("What's better than playing hide and seek? Playing hide and shoot your enemy in the face, thats what. ", Null, Null, Null), Left, 5, Null, Null, Color(Purple), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        Else If(Compare((Event Player).CurrentItemDesc, ==, 20));
            Destroy HUD Text((Event Player).CurrentItemTextID);
            Create HUD Text(Event Player, Null, Null, Custom String("That big round percent counter at the bottom of you screen. Lets bump that up \r\nto 100% and see what happens.", Null, Null, Null), Left, 5, Null, Null, Color(White), String, Default Visibility);
            Set Player Variable(Event Player, CurrentItemTextID, Last Text ID);
        End;
    }
}

rule ("Permadeath Dome") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.PermaDeath == True;
    }
    actions {
        Set Global Variable(DomeEndLoc, Random Value In Array(Global.SpawnPos));
        Set Global Variable(DomeRad, 100);
        Create Effect(All Players(All Teams), Sphere, Color(Red), Global.DomeEndLoc, Global.DomeRad, Visible To Position and Radius);
        Chase Global Variable Over Time(DomeRad, 1, 120, Destination and Duration);
    }
}

rule ("Step Outside safe Zone") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.PermaDeath == True;
        Distance Between(Global.DomeEndLoc, Event Player) > Global.DomeRad;
    }
    actions {
        Start Damage Over Time(Event Player, Null, 9999, 50);
        Set Player Variable(Event Player, FireDomeDamage, Last Damage Over Time ID);
    }
}

rule ("Step Inside safe Zone") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.PermaDeath == True;
        Distance Between(Global.DomeEndLoc, Event Player) <= Global.DomeRad;
    }
    actions {
        Stop Damage Over Time((Event Player).FireDomeDamage);
    }
}

rule ("Winning in permadeath") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.PermaDeath == True;
        Number Of Living Players(All Teams) == 1;
        Is Alive(Event Player) == True;
    }
    actions {
        Declare Player Victory(Event Player);
    }
}

rule ("Create perma death hud") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.PermaDeath == True;
    }
    actions {
        Destroy HUD Text(Global.PermaDeathIcon);
        Create HUD Text(All Players(All Teams), Icon String(Skull), Null, Null, Right, 5, Color(Red), Null, Null, Visible To and String, Default Visibility);
        Set Global Variable(PermaDeathIcon, Last Text ID);
    }
}

rule ("permadeath eliminated message") {
    event {
        Player Died;
        All;
        All;
    }
    conditions {
        Global.PermaDeath == True;
    }
    actions {
        Big Message(All Players(All Teams), Custom String("{0}{1} {2}", Hero Icon String(Hero Of(Event Player)), Event Player, Custom String("Was Eliminated", Null, Null, Null)));
    }
}

rule ("Kill inactive players on permadeath") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.PermaDeath == True;
        Has Spawned(Event Player) == False;
    }
    actions {
        Disable Built-In Game Mode Respawning(Event Player);
        Kill(Event Player, Null);
    }
}

rule ("Player joins on permadeath") {
    event {
        Player Joined Match;
        All;
        All;
    }
    conditions {
        Global.PermaDeath == True;
    }
    actions {
        Disable Built-In Game Mode Respawning(Event Player);
        Kill(Event Player, Null);
    }
}